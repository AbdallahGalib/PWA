const r="geofencing-pwa-v1",p="location-sync",w="periodic-geofence-check",m="GeofenceDB",i="locationUpdates",y=["/","/index.html","/manifest.json","/favicon.png","/service-worker.js","/leaflet/marker-icon.png","/leaflet/marker-icon-2x.png","/leaflet/marker-shadow.png"];function h(){return new Promise((t,e)=>{if(!indexedDB){e(new Error("IndexedDB is not supported in this context"));return}const o=indexedDB.open(m,1);o.onerror=()=>e(o.error),o.onsuccess=()=>t(o.result),o.onupgradeneeded=a=>{const n=a.target.result;n.objectStoreNames.contains(i)||n.createObjectStore(i,{keyPath:"timestamp"})}})}async function E(t){try{await(await h()).transaction(i,"readwrite").objectStore(i).add({timestamp:new Date().getTime(),location:t})}catch(e){console.warn("Failed to store location update:",e)}}async function g(){const o=(await h()).transaction(i,"readwrite").objectStore(i),a=await o.getAll();for(const n of a)try{(await self.clients.matchAll()).forEach(s=>{s.postMessage({type:"location-update",location:n})}),n.isInsideGeofence&&await u("Geofence Alert",{body:`You are inside the geofence: ${n.geofenceName}`,icon:"/vite.svg",badge:"/vite.svg",data:{location:n}}),await o.delete(n.timestamp)}catch(c){console.error("Error processing location:",c)}}async function u(t,e){try{await Notification.requestPermission()==="granted"&&await self.registration.showNotification(t,e)}catch(o){console.error("Error showing notification:",o)}}self.addEventListener("install",t=>{t.waitUntil(caches.open(r).then(e=>e.addAll(y)))});self.addEventListener("activate",t=>{t.waitUntil(caches.keys().then(e=>Promise.all(e.map(o=>{if(o!==r)return caches.delete(o)}))))});self.addEventListener("fetch",t=>{t.respondWith(caches.match(t.request).then(e=>e||fetch(t.request)))});self.addEventListener("sync",t=>{t.tag===p&&t.waitUntil(g())});self.addEventListener("periodicsync",t=>{t.tag===w&&t.waitUntil(g())});self.addEventListener("push",t=>{if(!t.data)return;const e=t.data.json();t.waitUntil(u(e.title,{body:e.body,icon:"/vite.svg",badge:"/vite.svg",data:e}))});self.addEventListener("notificationclick",t=>{t.notification.close(),t.waitUntil(clients.openWindow("/"))});self.addEventListener("message",t=>{t.data.type==="store-location"&&t.waitUntil(E(t.data.location))});self.addEventListener("periodicsync",t=>{t.tag==="check-geofence"&&t.waitUntil(M())});async function M(){try{const t=await v();"geolocation"in navigator&&navigator.geolocation.getCurrentPosition(async e=>{const{latitude:o,longitude:a}=e.coords;t&&t.length>0&&t.forEach(n=>{b(o,a,n.lat,n.lng)<=n.radius&&self.registration.showNotification("Geofence Alert",{body:`You are inside the geofence: ${n.name}`,icon:"/favicon.png"})})})}catch(t){console.error("Error in background check:",t)}}function b(t,e,o,a){const c=t*Math.PI/180,s=o*Math.PI/180,d=(o-t)*Math.PI/180,l=(a-e)*Math.PI/180,f=Math.sin(d/2)*Math.sin(d/2)+Math.cos(c)*Math.cos(s)*Math.sin(l/2)*Math.sin(l/2);return 6371e3*(2*Math.atan2(Math.sqrt(f),Math.sqrt(1-f)))}async function v(){try{const e=await(await caches.open(r)).match("geofence-data");return e?e.json():[]}catch(t){return console.error("Error getting stored geofence data:",t),[]}}
